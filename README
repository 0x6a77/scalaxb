scalaxb

scalaxb is an XML data-binding tool for Scala that supports W3C XML 
Schema (xsd) as the input file.

Installation
------------

scalaxb is tested only under Scala 2.8. You can install it using sbaz:

  $ sudo sbaz install scalaxb

See the file called INSTALL for details.

Usage
-----

  $ scalaxb [options] <schema_file>

  -d VALUE, --outdir VALUE : 
  	generated files will go into this directory

  -p VALUE, --package VALUE : 
  	specifies the target package

  -v,  --verbose: 
  	be extra verbose

  <schema_file> :
  	input schema to be converted

Example
-------

Suppose you have address.xsd:

  <xs:schema targetNamespace="http://www.example.com/IPO"
          xmlns="http://www.example.com/IPO"
          xmlns:xs="http://www.w3.org/2001/XMLSchema"
          xmlns:ipo="http://www.example.com/IPO">
    <xs:complexType name="Address">
      <xs:sequence>
        <xs:element name="name"   type="xs:string"/>
        <xs:element name="street" type="xs:string"/>
        <xs:element name="city"   type="xs:string"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="USAddress">
      <xs:complexContent>
        <xs:extension base="ipo:Address">
          <xs:sequence>
            <xs:element name="state" type="xs:string"/>
            <xs:element name="zip"   type="xs:positiveInteger"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:schema>

You then run the following:

  $ scalaxb address.xsd
  
You get address.scala that contains case classes that can parse XML 
documents conforming to the address.xsd:

  case class Address(name: String,
    street: String,
    city: String) extends DataModel with Addressable {
  }

  object Address {
    def fromXML(node: scala.xml.Node): Address =
      Address((node \ "name").text,
        (node \ "street").text,
        (node \ "city").text) 
  }

  trait Addressable {
    val name: String;
    val street: String;
    val city: String;
  }

  object Addressable {
    def fromXML(node: scala.xml.Node): Addressable = {
      val typeName = 
        (node \ "@{http://www.w3.org/2001/XMLSchema-instance}type").text    
      val withoutNS = typeName.drop(typeName.indexOf(":") + 1)
    
      withoutNS match {
        case "USAddress" => USAddress.fromXML(node)
        case _ => Address.fromXML(node)
      }
    }
  }

  case class USAddress(name: String,
    street: String,
    city: String,
    state: String,
    zip: Int) extends DataModel with Addressable {
  }

  object USAddress {
    def fromXML(node: scala.xml.Node): USAddress =
      USAddress((node \ "name").text,
        (node \ "street").text,
        (node \ "city").text,
        (node \ "state").text,
        (node \ "zip").text.toInt) 
  }

Bug Reporting
-------------

You can send xsd data binding bug reports to Issues

  http://github.com/eed3si9n/scalaxb/issues
  
or send me a message or an email

  http://github.com/inbox/new

Licensing
---------

It's the MIT License. See the file called LICENSE.
     
Contacts
--------

- eed3si9n at gmail dot com
