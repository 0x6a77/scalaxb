package scalaxb

trait HttpClients {
  val httpClient: HttpClient

  trait HttpClient {
    def request(in: String, address: java.net.URI, headers: Map[String, String]): String
  }
}

case class Fault[+A](original: Any, detail: Option[A]) {
  def asFault[B: scalaxb.XMLFormat] = Fault(original, detail map {
    case x: soapenvelope11.Detail => x.any.head.value match {
      case node: scala.xml.Node => scalaxb.fromXML[B](node)
      case _ => error("unsupported fault: " + toString)
    }
    case _ => error("unsupported fault: " + toString)
  })
}

trait Soap11Clients { this: HttpClients =>
  import soapenvelope11.{Envelope, Body, Detail}

  lazy val soapClient: Soap11Client = new Soap11Client {}
  val baseAddress: java.net.URI

  trait Soap11Client {
    val SOAP_ENVELOPE11_URI = "http://schemas.xmlsoap.org/soap/envelope/"

    def soapRequest(in: Option[Envelope], scope: scala.xml.NamespaceBinding,
                    address: java.net.URI, webMethod: String, action: Option[java.net.URI]): Envelope = {
      val merged = scalaxb.toScope(((Some("soap11") -> SOAP_ENVELOPE11_URI) ::
        scalaxb.fromScope(scope)).distinct: _*)
      val r = in map  { scalaxb.toXML(_, Some(SOAP_ENVELOPE11_URI), Some("Envelope"), merged) match {
        case elem: scala.xml.Elem => elem
        case x => error("unexpected non-elem: " + x.toString)
      }}
      val headers = scala.collection.mutable.Map[String, String]("Content-Type" -> "text/xml; charset=utf-8")
      headers ++ action map { x => "SOAPAction" -> """"%s"""".format(x)}
      val s = httpClient.request(r map {_.toString} getOrElse {""}, address, headers.toMap)
      val response = scala.xml.XML.loadString(s)
      scalaxb.fromXML[Envelope](response)
    }

    def requestResponse(in: scala.xml.NodeSeq, scope: scala.xml.NamespaceBinding,
                        address: java.net.URI, webMethod: String, action: Option[java.net.URI]):
        Either[Fault[Detail], scala.xml.NodeSeq] = {
      val envelope = Envelope(None, Body(Seq(DataRecord(None, None, in)), Map()), Nil, Map())
      buildResponse(soapRequest(Some(envelope), scope, address, webMethod, action))
    }

    def soapResponse(location: Option[String], params: Map[String, Any],
                     address: java.net.URI, webMethod: String, action: Option[java.net.URI]):
        Either[Fault[Detail], scala.xml.NodeSeq] = {
      buildResponse(soapRequest(None, scala.xml.TopScope, address, webMethod, action))
    }

    def buildResponse(soapResponse: Envelope):
        Either[Fault[Detail], scala.xml.NodeSeq] = soapResponse.Body.any.headOption match {
      case Some(DataRecord(_, _, x: scala.xml.Elem)) if (x.label == "Fault") &&
          (x.scope.getURI(x.prefix) == SOAP_ENVELOPE11_URI) =>
        val fault = scalaxb.fromXML[soapenvelope11.Fault](x)
        Left(Fault(fault, fault.detail))
      case _ =>
        Right(soapResponse.Body.any collect {
          case DataRecord(_, _, x: scala.xml.Node) => x
        })
    }
  }
}
