/*
 * Copyright (c) 2010 e.e d3si9n
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
package scalaxb.compiler.xsd

import scalaxb.compiler.{Module, Config, Snippet}
import scala.xml._

abstract class GenProtocol(val context: XsdContext) extends ContextProcessor {
  def generateProtocol(snippet: Snippet): Seq[Node] = {
    
    val name = makeTypeName("XMLProtocol")
    val scopeSchemas = context.schemas    
    def makeScopes(ss: List[SchemaDecl]): List[(Option[String], String)] = ss match {
      case x :: xs => 
        x.targetNamespace map { ns =>
          val prefix = makePrefix(x.targetNamespace, context)
          if (prefix == "") makeScopes(xs)
          else (Some(prefix), ns) :: makeScopes(xs)
        } getOrElse { makeScopes(xs) }
      case _ => Nil
    }

    // including XS_URL into the default scope prints out the xsi:type, which is necessary for anyType round trip.
    val scopes0 = makeScopes(scopeSchemas.toList) :::
      List((Some(XSI_PREFIX) -> XSI_URL), (Some(XS_PREFIX) -> XS_URL))
    val scopes = config.primaryNamespace match {
      case Some(ns) =>
        val primaryPair = if (context.schemas forall {_.elementQualifiedDefault}) List((None, ns))
          else if (scopes0 exists {_._1 == ns}) Nil
          else List((Some("unq"), ns))
        (primaryPair ::: scopes0).distinct
      case _ => scopes0.distinct
    }

    val pkg = packageName(config.primaryNamespace, context)
    val packageString = pkg map { "package " + _ + newline } getOrElse{""}
    val packageValueString = pkg map { x => x } getOrElse {""}
    
    <source>// Generated by &lt;a href="http://scalaxb.org/"&gt;scalaxb&lt;/a&gt;.
{packageString}    
/**
usage:
val obj = scalaxb.fromXML[{packageValueString}.Foo](node)
val document = scalaxb.toXML[{packageValueString}.Foo](obj, "foo", {packageValueString}.defaultScope)
**/
object `package` extends { buildDefaultProtocolName(name) } {{ }}

trait { buildDefaultProtocolName(name) } extends scalaxb.XMLStandardTypes {{
  val defaultScope = scalaxb.toScope({ if (scopes.isEmpty) "Nil: _*"
    else scopes.map(x => quote(x._1) + " -> " + quote(x._2)).mkString("," + newline + indent(2)) })
{snippet.implicitValue}
{snippet.defaultFormats}
}}</source>
  }
  
  def buildDefaultProtocolName(name: String): String =
    config.classPrefix map { p => p + name.drop(p.length) } getOrElse {name}
}
